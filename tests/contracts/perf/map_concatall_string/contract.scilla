import ListUtils PairUtils

library Test

let one_msg = 
  fun (msg : Message) => 
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let fst_f = @fst String String
let snd_f = @snd String String

(* List Int32 -> Int32 *)
(* Sum of elements in list *)
let list_concat =
  fun (l : List (Pair(String)(String))) =>
    let folder = @list_foldr (Pair(String)(String)) String in
    let init = "" in
    let iter =
      fun (h : Pair(String)(String)) =>
      fun (z : String) =>
        let hh = fst_f h in
        let ii = snd_f h in
        let b = builtin eq hh ii in
        let x = builtin concat z hh in
        let y = builtin concat x ii in
        y
     in
     folder iter init l
     
contract Test
()

field gmap : Map String String = Emp String String

transition sum()
  p <- gmap;

  mp = builtin to_list p;
  c = list_concat mp;
  start = Uint32 0;
  len = Uint32 5;
  d = builtin substr c start len;

  msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; res : d};
  msgs = one_msg msg;
  send msgs

end
