import ListUtils PairUtils

library Test

let one_msg = 
  fun (msg : Message) => 
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let fst_f = @fst Int256 Int256

(* List Int256 -> Int256 *)
(* Sum of elements in list *)
let list_sum =
  fun (l : List (Pair(Int256)(Int256))) =>
    let folder = @list_foldr (Pair(Int256)(Int256)) Int256 in
    let init = Int256 0 in
    let iter =
      fun (h : Pair(Int256)(Int256)) =>
      fun (z : Int256) =>
        let hh = fst_f h in
        builtin add hh z
     in
     folder iter init l
     
contract Test
()

field gmap : Map Int256 Int256 = Emp Int256 Int256
field topkey : Int256 = Int256 0

transition sum()
  p <- gmap;

  mp = builtin to_list p;
  sum = list_sum mp;

  msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; sum : sum};
  msgs = one_msg msg;
  send msgs

end
